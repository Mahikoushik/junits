package com.eaton.platform.core.workflows;

import com.adobe.granite.workflow.WorkflowSession;
import com.adobe.granite.workflow.exec.WorkItem;
import com.adobe.granite.workflow.metadata.MetaDataMap;
import io.wcm.testing.mock.aem.junit5.AemContext;
import io.wcm.testing.mock.aem.junit5.AemContextExtension;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.Session;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(AemContextExtension.class)
class EPSDensityDeciderTest {

    private final AemContext context = new AemContext();
    private EPSDensityDecider epsDensityDecider;

    private static final String TEST_ASSET_PATH = "/content/dam/test-asset";
    private static final String TEST_METADATA_PATH = TEST_ASSET_PATH + "/jcr:content/metadata";

    private WorkItem workItem;
    private WorkflowSession workflowSession;
    private MetaDataMap metaDataMap;
    private Session session;

    @BeforeEach
    void setUp() throws Exception {
        epsDensityDecider = new EPSDensityDecider();

        // Create asset and metadata structure
        Resource metadataResource = context.create().resource(TEST_METADATA_PATH, "xmp:eaton-content-type", "eaton:resources/technical-resources/drawings");

        // Mock JCR Session
        session = mock(Session.class);
        when(session.getRootNode()).thenReturn(metadataResource.adaptTo(Node.class));

        // Mock WorkflowSession
        workflowSession = mock(WorkflowSession.class);
        when(workflowSession.adaptTo(Session.class)).thenReturn(session);

        // Mock WorkItem
        workItem = mock(WorkItem.class);
        when(workItem.getWorkflowData()).thenReturn(mock(com.adobe.granite.workflow.exec.WorkflowData.class));
        when(workItem.getWorkflowData().getPayload()).thenReturn(TEST_ASSET_PATH);

        // Mock MetaDataMap
        metaDataMap = mock(MetaDataMap.class);
        when(workItem.getWorkflowData().getMetaDataMap()).thenReturn(metaDataMap);
    }

    @Test
    void testExecute_Density1000() throws Exception {
        // Validate that the mocked session is not null
        assertNotNull(workflowSession.adaptTo(Session.class), "Session should not be null after adapting WorkflowSession");

        // Execute the workflow process
        epsDensityDecider.execute(workItem, workflowSession, metaDataMap);

        // Verify the density decision
        Mockito.verify(metaDataMap).put(EPSDensityDecider.DENSITY_DECISION, EPSDensityDecider.DENSITY_1000);
    }

    @Test
    void testExecute_Density300() throws Exception {
        // Update content type for a different test case
        Resource metadataResource = context.resourceResolver().getResource(TEST_METADATA_PATH);
        assert metadataResource != null;
        Node metadataNode = metadataResource.adaptTo(Node.class);
        metadataNode.setProperty("xmp:eaton-content-type", "eaton:resources/marketing-resources/illustrations");
        context.resourceResolver().commit();

        // Execute the workflow process
        epsDensityDecider.execute(workItem, workflowSession, metaDataMap);

        // Verify the density decision
        Mockito.verify(metaDataMap).put(EPSDensityDecider.DENSITY_DECISION, EPSDensityDecider.DENSITY_300);
    }
}
